[{"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/index.tsx":"1","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/i18n.ts":"2","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/style/Global.ts":"3","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/lists/updater.ts":"4","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/application/updater.ts":"5","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/Providers.tsx":"6","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/App.tsx":"7","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/multicall/updater.tsx":"8","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/transactions/updater.tsx":"9","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/application/actions.ts":"10","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/lists/actions.ts":"11","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useFetchListCallback.ts":"12","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useDebounce.ts":"13","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useInterval.ts":"14","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useIsWindowVisible.ts":"15","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/TranslationsContext.ts":"16","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/LanguageContext.ts":"17","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/application/hooks.ts":"18","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/multicall/actions.ts":"19","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useContract.ts":"20","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/transactions/actions.ts":"21","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/chunkArray.ts":"22","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/retry.ts":"23","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/getLibrary.ts":"24","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/ThemeContext.tsx":"25","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/constants/localisation/languageCodes.ts":"26","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/AddLiquidity/redirects.tsx":"27","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/Swap/redirects.tsx":"28","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/RemoveLiquidity/redirects.tsx":"29","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/index.ts":"30","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/index.ts":"31","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/constants/index.ts":"32","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/getTokenList.ts":"33","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/resolveENSContentHash.ts":"34","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/constants/abis/erc20.ts":"35","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/constants/abis/migrator.ts":"36","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/RemoveLiquidity/index.tsx":"37","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/Swap/index.tsx":"38","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/AddLiquidity/index.tsx":"39","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/PoolFinder/index.tsx":"40","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/Pool/index.tsx":"41","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/Migrate/index.tsx":"42","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Popups/index.tsx":"43","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Menu/index.tsx":"44","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Web3ReactManager/index.tsx":"45","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/theme.ts":"46","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/multicall/reducer.ts":"47","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/lists/reducer.ts":"48","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/index.ts":"49","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/transactions/reducer.ts":"50","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/application/reducer.ts":"51","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/burn/reducer.ts":"52","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/connectors/index.ts":"53","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/global/actions.ts":"54","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/user/reducer.ts":"55","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/mint/reducer.ts":"56","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/swap/reducer.ts":"57","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/constants/multicall/index.ts":"58","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/constants/v1/index.ts":"59","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Menu/config.ts":"60","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/AppBody.tsx":"61","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/user/hooks.tsx":"62","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/wallet/hooks.ts":"63","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/AddLiquidity/PoolPriceBar.tsx":"64","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/constants/lists.ts":"65","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/burn/actions.ts":"66","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/swap/actions.ts":"67","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/mint/actions.ts":"68","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/user/actions.ts":"69","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/Tokens.ts":"70","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/multicall/hooks.ts":"71","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Loader/index.tsx":"72","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/lists/hooks.ts":"73","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/ConnectWalletButton/index.tsx":"74","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Shared/index.tsx":"75","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Column/index.tsx":"76","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Row/index.tsx":"77","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/connectors/NetworkConnector.ts":"78","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/connectors/Fortmatic.ts":"79","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/connectors/bsc/bscConnector.ts":"80","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/ConnectWalletButton/useAuth.ts":"81","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Shared/Type.tsx":"82","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Shared/Common.tsx":"83","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/ConnectWalletButton/Toasts.ts":"84","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/ConnectWalletButton/wallet.ts":"85","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useI18n.ts":"86","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Popups/PopupItem.tsx":"87","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useGetPriceData.ts":"88","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/ConnectWalletButton/getRpcUrl.ts":"89","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/Pool/styleds.tsx":"90","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useTheme.ts":"91","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/AddLiquidity/ConfirmAddModalBottom.tsx":"92","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useWrapCallback.ts":"93","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useApproveCallback.ts":"94","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useToggledVersion.ts":"95","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/translateTextHelpers.ts":"96","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/swap/hooks.ts":"97","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Popups/TransactionPopup.tsx":"98","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Popups/ListUpdatePopup.tsx":"99","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/data/Reserves.ts":"100","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/data/V1.ts":"101","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/styleds.tsx":"102","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/AdvancedSwapDetailsDropdown.tsx":"103","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/CurrencySearchModal.tsx":"104","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/currencyId.ts":"105","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/wrappedCurrency.ts":"106","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/maxAmountSpend.ts":"107","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/mint/hooks.ts":"108","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/prices.ts":"109","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useParsedQueryString.ts":"110","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/PageHeader/index.tsx":"111","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/transactions/hooks.tsx":"112","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/Trades.ts":"113","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useENS.ts":"114","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/listVersionLabel.ts":"115","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/data/Allowances.ts":"116","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/CardNav/index.tsx":"117","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TranslatedText/index.tsx":"118","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useSwapCallback.ts":"119","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useLast.ts":"120","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Card/index.tsx":"121","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/ListSelect.tsx":"122","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/CurrencySearch.tsx":"123","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/AdvancedSwapDetails.tsx":"124","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/parseENSAddress.ts":"125","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/uriToHttp.ts":"126","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/contenthashToUri.ts":"127","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/PageHeader/RecentTransactionsModal.tsx":"128","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/PageHeader/SettingsModal.tsx":"129","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/PageHeader/TransactionDeadlineSetting.tsx":"130","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/PageHeader/SlippageToleranceSetting.tsx":"131","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/QuestionHelper/index.tsx":"132","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Tooltip/index.tsx":"133","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Popover/index.tsx":"134","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useENSName.ts":"135","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useENSAddress.ts":"136","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/isZero.ts":"137","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/burn/hooks.ts":"138","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/useDebouncedChangeHandler.tsx":"139","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/confirmPriceImpactWithoutFee.ts":"140","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/TradePrice.tsx":"141","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/BetterTradeLink.tsx":"142","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/ConfirmSwapModal.tsx":"143","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/data/TotalSupply.ts":"144","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/CurrencyLogo/index.tsx":"145","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Slider/index.tsx":"146","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/DoubleLogo/index.tsx":"147","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/NavigationTabs/index.tsx":"148","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/PositionCard/index.tsx":"149","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/v1SwapArguments.ts":"150","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TransactionConfirmationModal/index.tsx":"151","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/CurrencyInputPanel/index.tsx":"152","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/ProgressSteps/index.tsx":"153","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SyrupWarningModal/index.tsx":"154","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TokenWarningModal/index.tsx":"155","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/AddressInputPanel/index.tsx":"156","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Pane/index.tsx":"157","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/SwapModalHeader.tsx":"158","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/SwapModalFooter.tsx":"159","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useHttpLocations.ts":"160","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/pancake/CoinLogo.ts":"161","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useToggle.ts":"162","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/sorting.ts":"163","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/filtering.ts":"164","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/FormattedPriceImpact.tsx":"165","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/SwapRoute.tsx":"166","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useOnClickOutside.tsx":"167","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/styleds.tsx":"168","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Modal/index.tsx":"169","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/CurrencyList.tsx":"170","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/SortButton.tsx":"171","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/CommonBases.tsx":"172","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TransactionConfirmationModal/ConfirmationModalContent.tsx":"173","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TransactionConfirmationModal/ConfirmationPendingContent.tsx":"174","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TransactionConfirmationModal/TransactionConfirmationModal.tsx":"175","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TransactionConfirmationModal/TransactionSubmittedContent.tsx":"176","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TransactionConfirmationModal/TransactionErrorContent.tsx":"177","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useENSContentHash.ts":"178","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Logo/index.tsx":"179","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/ListLogo/index.tsx":"180","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/NumericalInput/index.tsx":"181","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TransactionConfirmationModal/helpers.tsx":"182"},{"size":995,"mtime":1636278380448,"results":"183","hashOfConfig":"184"},{"size":509,"mtime":1636278380447,"results":"185","hashOfConfig":"184"},{"size":727,"mtime":1636278380453,"results":"186","hashOfConfig":"184"},{"size":3614,"mtime":1636278380450,"results":"187","hashOfConfig":"184"},{"size":1895,"mtime":1636278380449,"results":"188","hashOfConfig":"184"},{"size":849,"mtime":1636278380436,"results":"189","hashOfConfig":"184"},{"size":5694,"mtime":1636303417202,"results":"190","hashOfConfig":"184"},{"size":7636,"mtime":1636278380451,"results":"191","hashOfConfig":"184"},{"size":3043,"mtime":1636278380452,"results":"192","hashOfConfig":"184"},{"size":844,"mtime":1636278380449,"results":"193","hashOfConfig":"184"},{"size":982,"mtime":1636278380450,"results":"194","hashOfConfig":"184"},{"size":1885,"mtime":1636278380446,"results":"195","hashOfConfig":"184"},{"size":711,"mtime":1636278380446,"results":"196","hashOfConfig":"184"},{"size":642,"mtime":1636278380447,"results":"197","hashOfConfig":"184"},{"size":786,"mtime":1636278380447,"results":"198","hashOfConfig":"184"},{"size":420,"mtime":1636278380446,"results":"199","hashOfConfig":"184"},{"size":696,"mtime":1636278380445,"results":"200","hashOfConfig":"184"},{"size":1874,"mtime":1636278380449,"results":"201","hashOfConfig":"184"},{"size":1683,"mtime":1636278380451,"results":"202","hashOfConfig":"184"},{"size":3775,"mtime":1636278380446,"results":"203","hashOfConfig":"184"},{"size":950,"mtime":1636278380452,"results":"204","hashOfConfig":"184"},{"size":523,"mtime":1636278380454,"results":"205","hashOfConfig":"184"},{"size":1858,"mtime":1636278380455,"results":"206","hashOfConfig":"184"},{"size":221,"mtime":1636278380454,"results":"207","hashOfConfig":"184"},{"size":1016,"mtime":1636278380436,"results":"208","hashOfConfig":"184"},{"size":2182,"mtime":1636278380444,"results":"209","hashOfConfig":"184"},{"size":924,"mtime":1636278380448,"results":"210","hashOfConfig":"184"},{"size":322,"mtime":1636278380449,"results":"211","hashOfConfig":"184"},{"size":562,"mtime":1636278380449,"results":"212","hashOfConfig":"184"},{"size":1288,"mtime":1636278380450,"results":"213","hashOfConfig":"184"},{"size":3101,"mtime":1636278380446,"results":"214","hashOfConfig":"184"},{"size":3513,"mtime":1636278380444,"results":"215","hashOfConfig":"184"},{"size":2728,"mtime":1636278380454,"results":"216","hashOfConfig":"184"},{"size":1694,"mtime":1636278380455,"results":"217","hashOfConfig":"184"},{"size":350,"mtime":1636278380444,"results":"218","hashOfConfig":"184"},{"size":157,"mtime":1636278380444,"results":"219","hashOfConfig":"184"},{"size":26431,"mtime":1636278380449,"results":"220","hashOfConfig":"184"},{"size":19772,"mtime":1636316647806,"results":"221","hashOfConfig":"184"},{"size":16972,"mtime":1636301943674,"results":"222","hashOfConfig":"184"},{"size":6841,"mtime":1636278380448,"results":"223","hashOfConfig":"184"},{"size":5518,"mtime":1636301943674,"results":"224","hashOfConfig":"184"},{"size":15636,"mtime":1636396612471,"results":"225","hashOfConfig":"184"},{"size":1781,"mtime":1636278380439,"results":"226","hashOfConfig":"184"},{"size":1268,"mtime":1636302185178,"results":"227","hashOfConfig":"184"},{"size":2301,"mtime":1636278380442,"results":"228","hashOfConfig":"184"},{"size":456,"mtime":1636278380455,"results":"229","hashOfConfig":"184"},{"size":3940,"mtime":1636278380451,"results":"230","hashOfConfig":"184"},{"size":5340,"mtime":1636278380450,"results":"231","hashOfConfig":"184"},{"size":3813,"mtime":1636278380454,"results":"232","hashOfConfig":"184"},{"size":1901,"mtime":1636278380452,"results":"233","hashOfConfig":"184"},{"size":1714,"mtime":1636278380449,"results":"234","hashOfConfig":"184"},{"size":525,"mtime":1636278380450,"results":"235","hashOfConfig":"184"},{"size":2070,"mtime":1636278380444,"results":"236","hashOfConfig":"184"},{"size":287,"mtime":1636278380450,"results":"237","hashOfConfig":"184"},{"size":4788,"mtime":1636278380453,"results":"238","hashOfConfig":"184"},{"size":1272,"mtime":1636278380451,"results":"239","hashOfConfig":"184"},{"size":2459,"mtime":1636278380452,"results":"240","hashOfConfig":"184"},{"size":331,"mtime":1636278380445,"results":"241","hashOfConfig":"184"},{"size":726,"mtime":1636278380445,"results":"242","hashOfConfig":"184"},{"size":1299,"mtime":1636278380438,"results":"243","hashOfConfig":"184"},{"size":504,"mtime":1636281201145,"results":"244","hashOfConfig":"184"},{"size":8325,"mtime":1636278380453,"results":"245","hashOfConfig":"184"},{"size":4797,"mtime":1636356498407,"results":"246","hashOfConfig":"184"},{"size":1731,"mtime":1636278380448,"results":"247","hashOfConfig":"184"},{"size":231,"mtime":1636278380444,"results":"248","hashOfConfig":"184"},{"size":297,"mtime":1636278380449,"results":"249","hashOfConfig":"184"},{"size":670,"mtime":1636278380451,"results":"250","hashOfConfig":"184"},{"size":321,"mtime":1636278380450,"results":"251","hashOfConfig":"184"},{"size":1429,"mtime":1636278380453,"results":"252","hashOfConfig":"184"},{"size":3996,"mtime":1636301943674,"results":"253","hashOfConfig":"184"},{"size":7962,"mtime":1636391926995,"results":"254","hashOfConfig":"184"},{"size":1116,"mtime":1636390401625,"results":"255","hashOfConfig":"184"},{"size":3630,"mtime":1636278380450,"results":"256","hashOfConfig":"184"},{"size":506,"mtime":1636301483078,"results":"257","hashOfConfig":"184"},{"size":48,"mtime":1636278380441,"results":"258","hashOfConfig":"184"},{"size":647,"mtime":1636278380437,"results":"259","hashOfConfig":"184"},{"size":999,"mtime":1636278380440,"results":"260","hashOfConfig":"184"},{"size":5636,"mtime":1636278380443,"results":"261","hashOfConfig":"184"},{"size":1488,"mtime":1636278380443,"results":"262","hashOfConfig":"184"},{"size":6174,"mtime":1636278380443,"results":"263","hashOfConfig":"184"},{"size":1903,"mtime":1636355750041,"results":"264","hashOfConfig":"184"},{"size":886,"mtime":1636278380440,"results":"265","hashOfConfig":"184"},{"size":3498,"mtime":1636278380440,"results":"266","hashOfConfig":"184"},{"size":2309,"mtime":1636278380437,"results":"267","hashOfConfig":"184"},{"size":1901,"mtime":1636278380437,"results":"268","hashOfConfig":"184"},{"size":525,"mtime":1636278380447,"results":"269","hashOfConfig":"184"},{"size":2491,"mtime":1636278380439,"results":"270","hashOfConfig":"184"},{"size":1065,"mtime":1636302204745,"results":"271","hashOfConfig":"184"},{"size":265,"mtime":1636278380437,"results":"272","hashOfConfig":"184"},{"size":1218,"mtime":1636278380448,"results":"273","hashOfConfig":"184"},{"size":354,"mtime":1636278380447,"results":"274","hashOfConfig":"184"},{"size":2220,"mtime":1636278380448,"results":"275","hashOfConfig":"184"},{"size":3128,"mtime":1636390035357,"results":"276","hashOfConfig":"184"},{"size":4242,"mtime":1636278380446,"results":"277","hashOfConfig":"184"},{"size":393,"mtime":1636278380447,"results":"278","hashOfConfig":"184"},{"size":1408,"mtime":1636278380455,"results":"279","hashOfConfig":"184"},{"size":10348,"mtime":1636316740380,"results":"280","hashOfConfig":"184"},{"size":1235,"mtime":1636278380439,"results":"281","hashOfConfig":"184"},{"size":3620,"mtime":1636278380439,"results":"282","hashOfConfig":"184"},{"size":2066,"mtime":1636278380445,"results":"283","hashOfConfig":"184"},{"size":6278,"mtime":1636278380445,"results":"284","hashOfConfig":"184"},{"size":3329,"mtime":1636278380443,"results":"285","hashOfConfig":"184"},{"size":960,"mtime":1636278380442,"results":"286","hashOfConfig":"184"},{"size":2552,"mtime":1636355764938,"results":"287","hashOfConfig":"184"},{"size":272,"mtime":1636301943675,"results":"288","hashOfConfig":"184"},{"size":894,"mtime":1636278380455,"results":"289","hashOfConfig":"184"},{"size":640,"mtime":1636278380454,"results":"290","hashOfConfig":"184"},{"size":7121,"mtime":1636278380450,"results":"291","hashOfConfig":"184"},{"size":3184,"mtime":1636278380455,"results":"292","hashOfConfig":"184"},{"size":359,"mtime":1636278380447,"results":"293","hashOfConfig":"184"},{"size":3297,"mtime":1636301943673,"results":"294","hashOfConfig":"184"},{"size":2798,"mtime":1636278380452,"results":"295","hashOfConfig":"184"},{"size":4363,"mtime":1636278380446,"results":"296","hashOfConfig":"184"},{"size":765,"mtime":1636278380446,"results":"297","hashOfConfig":"184"},{"size":182,"mtime":1636278380454,"results":"298","hashOfConfig":"184"},{"size":689,"mtime":1636278380445,"results":"299","hashOfConfig":"184"},{"size":1039,"mtime":1636281370873,"results":"300","hashOfConfig":"184"},{"size":353,"mtime":1636278380442,"results":"301","hashOfConfig":"184"},{"size":9786,"mtime":1636278380447,"results":"302","hashOfConfig":"184"},{"size":1024,"mtime":1636278380447,"results":"303","hashOfConfig":"184"},{"size":1419,"mtime":1636278380436,"results":"304","hashOfConfig":"184"},{"size":10543,"mtime":1636390401625,"results":"305","hashOfConfig":"184"},{"size":8224,"mtime":1636390035356,"results":"306","hashOfConfig":"184"},{"size":3397,"mtime":1636278380442,"results":"307","hashOfConfig":"184"},{"size":360,"mtime":1636278380454,"results":"308","hashOfConfig":"184"},{"size":775,"mtime":1636278380455,"results":"309","hashOfConfig":"184"},{"size":1418,"mtime":1636278380454,"results":"310","hashOfConfig":"184"},{"size":2962,"mtime":1636301943673,"results":"311","hashOfConfig":"184"},{"size":587,"mtime":1636278380438,"results":"312","hashOfConfig":"184"},{"size":2064,"mtime":1636278380439,"results":"313","hashOfConfig":"184"},{"size":3682,"mtime":1636278380438,"results":"314","hashOfConfig":"184"},{"size":1073,"mtime":1636278380439,"results":"315","hashOfConfig":"184"},{"size":902,"mtime":1636278380441,"results":"316","hashOfConfig":"184"},{"size":3100,"mtime":1636278380439,"results":"317","hashOfConfig":"184"},{"size":1596,"mtime":1636278380446,"results":"318","hashOfConfig":"184"},{"size":1394,"mtime":1636278380446,"results":"319","hashOfConfig":"184"},{"size":185,"mtime":1636278380454,"results":"320","hashOfConfig":"184"},{"size":5286,"mtime":1636278380450,"results":"321","hashOfConfig":"184"},{"size":1143,"mtime":1636278380455,"results":"322","hashOfConfig":"184"},{"size":984,"mtime":1636278380443,"results":"323","hashOfConfig":"184"},{"size":1147,"mtime":1636278380443,"results":"324","hashOfConfig":"184"},{"size":1302,"mtime":1636278380442,"results":"325","hashOfConfig":"184"},{"size":3211,"mtime":1636278380442,"results":"326","hashOfConfig":"184"},{"size":697,"mtime":1636278380445,"results":"327","hashOfConfig":"184"},{"size":1873,"mtime":1636278380437,"results":"328","hashOfConfig":"184"},{"size":3207,"mtime":1636278380441,"results":"329","hashOfConfig":"184"},{"size":1100,"mtime":1636278380437,"results":"330","hashOfConfig":"184"},{"size":4184,"mtime":1636301943672,"results":"331","hashOfConfig":"184"},{"size":8086,"mtime":1636278380439,"results":"332","hashOfConfig":"184"},{"size":3034,"mtime":1636278380455,"results":"333","hashOfConfig":"184"},{"size":452,"mtime":1636278380442,"results":"334","hashOfConfig":"184"},{"size":6274,"mtime":1636391226974,"results":"335","hashOfConfig":"184"},{"size":2449,"mtime":1636278380439,"results":"336","hashOfConfig":"184"},{"size":2786,"mtime":1636278380441,"results":"337","hashOfConfig":"184"},{"size":5060,"mtime":1636278380441,"results":"338","hashOfConfig":"184"},{"size":3727,"mtime":1636278380436,"results":"339","hashOfConfig":"184"},{"size":191,"mtime":1636278380439,"results":"340","hashOfConfig":"184"},{"size":4817,"mtime":1636278380443,"results":"341","hashOfConfig":"184"},{"size":4077,"mtime":1636301943673,"results":"342","hashOfConfig":"184"},{"size":717,"mtime":1636278380447,"results":"343","hashOfConfig":"184"},{"size":208,"mtime":1636278380442,"results":"344","hashOfConfig":"184"},{"size":272,"mtime":1636278380447,"results":"345","hashOfConfig":"184"},{"size":1672,"mtime":1636281084063,"results":"346","hashOfConfig":"184"},{"size":1735,"mtime":1636355781950,"results":"347","hashOfConfig":"184"},{"size":567,"mtime":1636278380442,"results":"348","hashOfConfig":"184"},{"size":1338,"mtime":1636278380443,"results":"349","hashOfConfig":"184"},{"size":741,"mtime":1636278380447,"results":"350","hashOfConfig":"184"},{"size":1918,"mtime":1636390401626,"results":"351","hashOfConfig":"184"},{"size":3178,"mtime":1636278380438,"results":"352","hashOfConfig":"184"},{"size":7018,"mtime":1636389858895,"results":"353","hashOfConfig":"184"},{"size":710,"mtime":1636130085737,"results":"354","hashOfConfig":"184"},{"size":2325,"mtime":1636391926994,"results":"355","hashOfConfig":"184"},{"size":656,"mtime":1636278380441,"results":"356","hashOfConfig":"184"},{"size":1242,"mtime":1636278380441,"results":"357","hashOfConfig":"184"},{"size":1079,"mtime":1636278380441,"results":"358","hashOfConfig":"184"},{"size":1320,"mtime":1636278380442,"results":"359","hashOfConfig":"184"},{"size":1152,"mtime":1636278380441,"results":"360","hashOfConfig":"184"},{"size":1245,"mtime":1636278380446,"results":"361","hashOfConfig":"184"},{"size":781,"mtime":1636278380438,"results":"362","hashOfConfig":"184"},{"size":574,"mtime":1636278380438,"results":"363","hashOfConfig":"184"},{"size":2249,"mtime":1636278380438,"results":"364","hashOfConfig":"184"},{"size":1144,"mtime":1636278380442,"results":"365","hashOfConfig":"184"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},"1hj98w9",{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"368"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"368"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"368"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"614","messages":"615","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616","usedDeprecatedRules":"368"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"368"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"682","messages":"683","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"700","messages":"701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"702","messages":"703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"704","messages":"705","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"706","messages":"707","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"712","messages":"713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"368"},"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/index.tsx",[],["736","737","738","739","740"],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/i18n.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/style/Global.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/lists/updater.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/application/updater.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/Providers.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/App.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/multicall/updater.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/transactions/updater.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/application/actions.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/lists/actions.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useFetchListCallback.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useDebounce.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useInterval.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useIsWindowVisible.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/TranslationsContext.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/LanguageContext.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/application/hooks.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/multicall/actions.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useContract.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/transactions/actions.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/chunkArray.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/retry.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/getLibrary.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/ThemeContext.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/constants/localisation/languageCodes.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/AddLiquidity/redirects.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/Swap/redirects.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/RemoveLiquidity/redirects.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/index.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/index.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/constants/index.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/getTokenList.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/resolveENSContentHash.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/constants/abis/erc20.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/constants/abis/migrator.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/RemoveLiquidity/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/Swap/index.tsx",["741"],"import { CurrencyAmount, JSBI, Token, Trade } from 'morph-sdk'\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { ArrowDown } from 'react-feather'\nimport { CardBody, ArrowDownIcon, Button, IconButton, Text } from 'trinityhelper'\nimport { ThemeContext }  from 'styled-components'\nimport AddressInputPanel from 'components/AddressInputPanel'\nimport Card, { GreyCard } from 'components/Card'\nimport { AutoColumn } from 'components/Column'\nimport ConfirmSwapModal from 'components/swap/ConfirmSwapModal'\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\nimport CardNav from 'components/CardNav'\nimport { AutoRow, RowBetween } from 'components/Row'\nimport AdvancedSwapDetailsDropdown from 'components/swap/AdvancedSwapDetailsDropdown'\nimport BetterTradeLink from 'components/swap/BetterTradeLink'\nimport confirmPriceImpactWithoutFee from 'components/swap/confirmPriceImpactWithoutFee'\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from 'components/swap/styleds'\nimport TradePrice from 'components/swap/TradePrice'\nimport TokenWarningModal from 'components/TokenWarningModal'\nimport SyrupWarningModal from 'components/SyrupWarningModal'\nimport ProgressSteps from 'components/ProgressSteps'\n\nimport { BETTER_TRADE_LINK_THRESHOLD, INITIAL_ALLOWED_SLIPPAGE } from 'constants/index'\nimport { isTradeBetter } from 'data/V1'\nimport { useActiveWeb3React } from 'hooks'\nimport { useCurrency } from 'hooks/Tokens'\nimport { ApprovalState, useApproveCallbackFromTrade } from 'hooks/useApproveCallback'\nimport { useSwapCallback } from 'hooks/useSwapCallback'\nimport useToggledVersion, { Version } from 'hooks/useToggledVersion'\nimport useWrapCallback, { WrapType } from 'hooks/useWrapCallback'\nimport { Field } from 'state/swap/actions'\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from 'state/swap/hooks'\nimport { useExpertModeManager, useUserDeadline, useUserSlippageTolerance } from 'state/user/hooks'\nimport { LinkStyledButton, TYPE } from 'components/Shared'\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\nimport { computeTradePriceBreakdown, warningSeverity } from 'utils/prices'\nimport Loader from 'components/Loader'\nimport { TranslateString } from 'utils/translateTextHelpers'\nimport PageHeader from 'components/PageHeader'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport AppBody from '../AppBody'\n\n\n// import Background from '../../components/Background'\n\n\nconst { main: Main } = TYPE\n\nconst Swap = () => {\n  const loadedUrlParams = useDefaultsFromURLSearch()\n\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [\n    useCurrency(loadedUrlParams?.inputCurrencyId),\n    useCurrency(loadedUrlParams?.outputCurrencyId),\n  ]\n  const [dismissTokenWarning, setDismissTokenWarning] = useState<boolean>(false)\n  const [isSyrup, setIsSyrup] = useState<boolean>(false)\n  const [syrupTransactionType, setSyrupTransactionType] = useState<string>('')\n  const urlLoadedTokens: Token[] = useMemo(\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\n    [loadedInputCurrency, loadedOutputCurrency]\n  )\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true)\n  }, [])\n\n  const handleConfirmSyrupWarning = useCallback(() => {\n    setIsSyrup(false)\n    setSyrupTransactionType('')\n  }, [])\n\n  const { account } = useActiveWeb3React()\n  const theme = useContext(ThemeContext)\n\n  const [isExpertMode] = useExpertModeManager()\n\n  // get custom setting values for user\n  const [deadline] = useUserDeadline()\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  // swap state\n  const { independentField, typedValue, recipient } = useSwapState()\n  const {\n    v1Trade,\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError,\n  } = useDerivedSwapInfo()\n  const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\n    currencies[Field.INPUT],\n    currencies[Field.OUTPUT],\n    typedValue\n  )\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\n  //   const { address: recipientAddress } = useENSAddress(recipient)\n  const toggledVersion = useToggledVersion()\n  const trade = showWrap\n    ? undefined\n    : {\n        [Version.v1]: v1Trade,\n        [Version.v2]: v2Trade,\n      }[toggledVersion]\n\n  const betterTradeLinkVersion: Version | undefined =\n    toggledVersion === Version.v2 && isTradeBetter(v2Trade, v1Trade, BETTER_TRADE_LINK_THRESHOLD)\n      ? Version.v1\n      : toggledVersion === Version.v1 && isTradeBetter(v1Trade, v2Trade)\n      ? Version.v2\n      : undefined\n\n  const parsedAmounts = showWrap\n    ? {\n        [Field.INPUT]: parsedAmount,\n        [Field.OUTPUT]: parsedAmount,\n      }\n    : {\n        [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount,\n      }\n\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\n  const isValid = !swapInputError\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value)\n    },\n    [onUserInput]\n  )\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value)\n    },\n    [onUserInput]\n  )\n\n  // modal and loading\n  const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n    showConfirm: boolean\n    tradeToConfirm: Trade | undefined\n    attemptingTxn: boolean\n    swapErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap\n      ? parsedAmounts[independentField]?.toExact() ?? ''\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  const route = trade?.route\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\n  )\n  const noRoute = !route\n\n  // check whether the user has approved the router on the input token\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true)\n    }\n  }, [approval, approvalSubmitted])\n\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\n\n  // the callback to execute the swap\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(\n    trade,\n    allowedSlippage,\n    deadline,\n    recipient\n  )\n\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\n\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return\n    }\n    if (!swapCallback) {\n      return\n    }\n    setSwapState((prevState) => ({ ...prevState, attemptingTxn: true, swapErrorMessage: undefined, txHash: undefined }))\n    swapCallback()\n      .then((hash) => {\n        setSwapState((prevState) => ({\n          ...prevState,\n          attemptingTxn: false,\n          swapErrorMessage: undefined,\n          txHash: hash,\n        }))\n      })\n      .catch((error) => {\n        setSwapState((prevState) => ({\n          ...prevState,\n          attemptingTxn: false,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        }))\n      })\n  }, [priceImpactWithoutFee, swapCallback, setSwapState])\n\n  // errors\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n\n  // warnings on slippage\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode)\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState((prevState) => ({ ...prevState, showConfirm: false }))\n\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '')\n    }\n  }, [onUserInput, txHash, setSwapState])\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState((prevState) => ({ ...prevState, tradeToConfirm: trade }))\n  }, [trade])\n\n  // This will check to see if the user has selected Syrup to either buy or sell.\n  // If so, they will be alerted with a warning message.\n  const checkForSyrup = useCallback(\n    (selected: string, purchaseType: string) => {\n      if (selected === 'syrup') {\n        setIsSyrup(true)\n        setSyrupTransactionType(purchaseType)\n      }\n    },\n    [setIsSyrup, setSyrupTransactionType]\n  )\n\n  const handleInputSelect = useCallback(\n    (inputCurrency) => {\n\n      console.log('the select input!', inputCurrency)\n      \n      setApprovalSubmitted(false) // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, inputCurrency)\n      if (inputCurrency.symbol.toLowerCase() === 'syrup') {\n        checkForSyrup(inputCurrency.symbol.toLowerCase(), 'Selling')\n      }\n    },\n    [onCurrencySelection, setApprovalSubmitted, checkForSyrup]\n  )\n\n  const handleMaxInput = useCallback(() => {\n    if (maxAmountInput) {\n      onUserInput(Field.INPUT, maxAmountInput.toExact())\n    }\n  }, [maxAmountInput, onUserInput])\n\n  const handleOutputSelect = useCallback(\n    (outputCurrency) => {\n      onCurrencySelection(Field.OUTPUT, outputCurrency)\n      if (outputCurrency.symbol.toLowerCase() === 'syrup') {\n        checkForSyrup(outputCurrency.symbol.toLowerCase(), 'Buying')\n      }\n    },\n    [onCurrencySelection, checkForSyrup]\n  )\n\n  return (\n    <>\n    \n      <TokenWarningModal\n        isOpen={urlLoadedTokens.length > 0 && !dismissTokenWarning}\n        tokens={urlLoadedTokens}\n        onConfirm={handleConfirmTokenWarning}\n      />\n      <SyrupWarningModal\n        isOpen={isSyrup}\n        transactionType={syrupTransactionType}\n        onConfirm={handleConfirmSyrupWarning}\n      />\n      <CardNav />\n      <AppBody>\n        <Wrapper id=\"swap-page\">\n          <ConfirmSwapModal\n            isOpen={showConfirm}\n            trade={trade}\n            originalTrade={tradeToConfirm}\n            onAcceptChanges={handleAcceptChanges}\n            attemptingTxn={attemptingTxn}\n            txHash={txHash}\n            recipient={recipient}\n            allowedSlippage={allowedSlippage}\n            onConfirm={handleSwap}\n            swapErrorMessage={swapErrorMessage}\n            onDismiss={handleConfirmDismiss}\n          />\n          <PageHeader title=\"Exchange\" description=\"Trade tokens in an instant\" />\n          <CardBody>\n            <AutoColumn gap=\"md\">\n              <CurrencyInputPanel\n                label={\n                  independentField === Field.OUTPUT && !showWrap && trade\n                    ? 'From (estimated)'\n                    : TranslateString(76, 'From')\n                }\n                value={formattedAmounts[Field.INPUT]}\n                showMaxButton={!atMaxAmountInput}\n                currency={currencies[Field.INPUT]}\n                onUserInput={handleTypeInput}\n                onMax={handleMaxInput}\n                onCurrencySelect={handleInputSelect}\n                otherCurrency={currencies[Field.OUTPUT]}\n                id=\"swap-currency-input\"\n              />\n              <AutoColumn justify=\"space-between\">\n                <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\n                  <ArrowWrapper clickable>\n                    <IconButton\n                      variant=\"tertiary\"\n                      onClick={() => {\n                        setApprovalSubmitted(false) // reset 2 step UI for approvals\n                        onSwitchTokens()\n                      }}\n                      style={{ borderRadius: '50%' }}\n                      scale=\"sm\"\n                    >\n                      <ArrowDownIcon color=\"textSubtle\" width=\"24px\" />\n                    </IconButton>\n                  </ArrowWrapper>\n                  {recipient === null && !showWrap && isExpertMode ? (\n                    <LinkStyledButton id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\n                      + Add a send (optional)\n                    </LinkStyledButton>\n                  ) : null}\n                </AutoRow>\n              </AutoColumn>\n              <CurrencyInputPanel\n                value={formattedAmounts[Field.OUTPUT]}\n                onUserInput={handleTypeOutput}\n                label={\n                  independentField === Field.INPUT && !showWrap && trade ? 'To (estimated)' : TranslateString(80, 'To')\n                }\n                showMaxButton={false}\n                currency={currencies[Field.OUTPUT]}\n                onCurrencySelect={handleOutputSelect}\n                otherCurrency={currencies[Field.INPUT]}\n                id=\"swap-currency-output\"\n              />\n\n              {recipient !== null && !showWrap ? (\n                <>\n                  <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\n                    <ArrowWrapper clickable={false}>\n                      <ArrowDown size=\"16\" color={theme.colors.textSubtle} />\n                    </ArrowWrapper>\n                    <LinkStyledButton id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\n                      - Remove send\n                    </LinkStyledButton>\n                  </AutoRow>\n                  <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\n                </>\n              ) : null}\n\n              {showWrap ? null : (\n                <Card padding=\".25rem .75rem 0 .75rem\" borderRadius=\"20px\">\n                  <AutoColumn gap=\"4px\">\n                    {Boolean(trade) && (\n                      <RowBetween align=\"center\">\n                        <Text fontSize=\"14px\">Price</Text>\n                        <TradePrice\n                          price={trade?.executionPrice}\n                          showInverted={showInverted}\n                          setShowInverted={setShowInverted}\n                        />\n                      </RowBetween>\n                    )}\n                    {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\n                      <RowBetween align=\"center\">\n                        <Text fontSize=\"14px\">Slippage Tolerance</Text>\n                        <Text fontSize=\"14px\">{allowedSlippage / 100}%</Text>\n                      </RowBetween>\n                    )}\n                  </AutoColumn>\n                </Card>\n              )}\n            </AutoColumn>\n            <BottomGrouping>\n              {!account ? (\n                <ConnectWalletButton />\n              ) : showWrap ? (\n                <Button disabled={Boolean(wrapInputError)} onClick={onWrap} >\n                  {wrapInputError ??\n                    (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\n                </Button>\n              ) : noRoute && userHasSpecifiedInputOutput ? (\n                <GreyCard style={{ textAlign: 'center' }}>\n                  <Main mb=\"4px\">Insufficient liquidity for this trade.</Main>\n                </GreyCard>\n              ) : showApproveFlow ? (\n                <RowBetween>\n                  <Button\n                    onClick={approveCallback}\n                    disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\n                    style={{ width: '48%' }}\n                    variant={approval === ApprovalState.APPROVED ? 'success' : 'tertiary'}\n                  >\n                    {approval === ApprovalState.PENDING ? (\n                      <AutoRow gap=\"6px\" justify=\"center\">\n                        Approving <Loader stroke=\"white\" />\n                      </AutoRow>\n                    ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\n                      'Approved'\n                    ) : (\n                      `Approve ${currencies[Field.INPUT]?.symbol}`\n                    )}\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      if (isExpertMode) {\n                        handleSwap()\n                      } else {\n                        setSwapState({\n                          tradeToConfirm: trade,\n                          attemptingTxn: false,\n                          swapErrorMessage: undefined,\n                          showConfirm: true,\n                          txHash: undefined,\n                        })\n                      }\n                    }}\n                    style={{ width: '48%' }}\n                    id=\"swap-button\"\n                    disabled={\n                      !isValid || approval !== ApprovalState.APPROVED || (priceImpactSeverity > 3 && !isExpertMode)\n                    }\n                    variant={isValid && priceImpactSeverity > 2 ? 'danger' : 'tertiary'}\n                  >\n                    {priceImpactSeverity > 3 && !isExpertMode\n                      ? `Price Impact High`\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\n                  </Button>\n                </RowBetween>\n              ) : (\n                <Button\n                  onClick={() => {\n                    if (isExpertMode) {\n                      handleSwap()\n                    } else {\n                      setSwapState({\n                        tradeToConfirm: trade,\n                        attemptingTxn: false,\n                        swapErrorMessage: undefined,\n                        showConfirm: true,\n                        txHash: undefined,\n                      })\n                    }\n                  }}\n                  id=\"swap-button\"\n                  disabled={!isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError}\n                  variant={isValid && priceImpactSeverity > 2 && !swapCallbackError ? 'danger' : 'tertiary'}\n                >\n                  {swapInputError ||\n                    (priceImpactSeverity > 3 && !isExpertMode\n                      ? `Price Impact Too High`\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`)}\n                </Button>\n              )}\n              {showApproveFlow && <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />}\n              {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n              {betterTradeLinkVersion && <BetterTradeLink version={betterTradeLinkVersion} />}\n            </BottomGrouping>\n          </CardBody>\n        </Wrapper>\n      </AppBody>\n      <AdvancedSwapDetailsDropdown trade={trade} />\n      \n    </>\n  )\n}\n\nexport default Swap\n","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/AddLiquidity/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/PoolFinder/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/Pool/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/Migrate/index.tsx",["742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782"],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Popups/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Menu/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Web3ReactManager/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/theme.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/multicall/reducer.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/lists/reducer.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/index.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/transactions/reducer.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/application/reducer.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/burn/reducer.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/connectors/index.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/global/actions.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/user/reducer.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/mint/reducer.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/swap/reducer.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/constants/multicall/index.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/constants/v1/index.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Menu/config.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/AppBody.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/user/hooks.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/wallet/hooks.ts",["783","784","785"],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/AddLiquidity/PoolPriceBar.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/constants/lists.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/burn/actions.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/swap/actions.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/mint/actions.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/user/actions.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/Tokens.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/multicall/hooks.ts",["786"],"import { Interface, FunctionFragment } from '@ethersproject/abi'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useBlockNumber } from '../application/hooks'\nimport { AppDispatch, AppState } from '../index'\nimport {\n  addMulticallListeners,\n  Call,\n  removeMulticallListeners,\n  parseCallKey,\n  toCallKey,\n  ListenerOptions,\n} from './actions'\n\nexport interface Result extends ReadonlyArray<any> {\n  readonly [key: string]: any\n}\n\ntype MethodArg = string | number | BigNumber\ntype MethodArgs = Array<MethodArg | MethodArg[]>\n\ntype OptionalMethodInputs = Array<MethodArg | MethodArg[] | undefined> | undefined\n\nfunction isMethodArg(x: unknown): x is MethodArg {\n  return ['string', 'number'].indexOf(typeof x) !== -1\n}\n\nfunction isValidMethodArgs(x: unknown): x is MethodArgs | undefined {\n  return (\n    x === undefined ||\n    (Array.isArray(x) && x.every((xi) => isMethodArg(xi) || (Array.isArray(xi) && xi.every(isMethodArg))))\n  )\n}\n\ninterface CallResult {\n  readonly valid: boolean\n  readonly data: string | undefined\n  readonly blockNumber: number | undefined\n}\n\nconst INVALID_RESULT: CallResult = { valid: false, blockNumber: undefined, data: undefined }\n\n// use this options object\nexport const NEVER_RELOAD: ListenerOptions = {\n  blocksPerFetch: Infinity,\n}\n\n// the lowest level call for subscribing to contract data\nfunction useCallsData(calls: (Call | undefined)[], options?: ListenerOptions): CallResult[] {\n  const { chainId } = useActiveWeb3React()\n  const callResults = useSelector<AppState, AppState['multicall']['callResults']>(\n    (state) => state.multicall.callResults\n  )\n  const dispatch = useDispatch<AppDispatch>()\n\n  const serializedCallKeys: string = useMemo(\n    () =>\n      JSON.stringify(\n        calls\n          ?.filter((c): c is Call => Boolean(c))\n          ?.map(toCallKey)\n          ?.sort() ?? []\n      ),\n    [calls]\n  )\n\n  // update listeners when there is an actual change that persists for at least 100ms\n  useEffect(() => {\n    const callKeys: string[] = JSON.parse(serializedCallKeys)\n    if (!chainId || callKeys.length === 0) return undefined\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const calls = callKeys.map((key) => parseCallKey(key))\n    dispatch(\n      addMulticallListeners({\n        chainId,\n        calls,\n        options,\n      })\n    )\n\n    return () => {\n      dispatch(\n        removeMulticallListeners({\n          chainId,\n          calls,\n          options,\n        })\n      )\n    }\n  }, [chainId, dispatch, options, serializedCallKeys])\n\n  return useMemo(\n    () =>\n      // @ts-ignore\n      calls.map<CallResult>((call) => {\n        if (!chainId || !call) return INVALID_RESULT\n\n        const result = callResults[chainId]?.[toCallKey(call)]\n        const data = result?.data && result?.data !== '0x' ? result.data : null\n\n        return { valid: true, data, blockNumber: result?.blockNumber }\n      }),\n    [callResults, calls, chainId]\n  )\n}\n\ninterface CallState {\n  readonly valid: boolean\n  // the result, or undefined if loading or errored/no data\n  readonly result: Result | undefined\n  // true if the result has never been fetched\n  readonly loading: boolean\n  // true if the result is not for the latest block\n  readonly syncing: boolean\n  // true if the call was made and is synced, but the return data is invalid\n  readonly error: boolean\n}\n\nconst INVALID_CALL_STATE: CallState = { valid: false, result: undefined, loading: false, syncing: false, error: false }\nconst LOADING_CALL_STATE: CallState = { valid: true, result: undefined, loading: true, syncing: true, error: false }\n\nfunction toCallState(\n  callResult: CallResult | undefined,\n  contractInterface: Interface | undefined,\n  fragment: FunctionFragment | undefined,\n  latestBlockNumber: number | undefined\n): CallState {\n  if (!callResult) return INVALID_CALL_STATE\n  const { valid, data, blockNumber } = callResult\n  if (!valid) return INVALID_CALL_STATE\n  if (valid && !blockNumber) return LOADING_CALL_STATE\n  if (!contractInterface || !fragment || !latestBlockNumber) return LOADING_CALL_STATE\n  const success = data && data.length > 2\n  const syncing = (blockNumber ?? 0) < latestBlockNumber\n  let result: Result | undefined\n  if (success && data) {\n    try {\n      result = contractInterface.decodeFunctionResult(fragment, data)\n    } catch (error) {\n      console.error('Result data parsing failed', fragment, data)\n      return {\n        valid: true,\n        loading: false,\n        error: true,\n        syncing,\n        result,\n      }\n    }\n  }\n  return {\n    valid: true,\n    loading: false,\n    syncing,\n    result,\n    error: !success,\n  }\n}\n\nexport function useSingleContractMultipleData(\n  contract: Contract | null | undefined,\n  methodName: string,\n  callInputs: OptionalMethodInputs[],\n  options?: ListenerOptions\n): CallState[] {\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\n\n  const calls = useMemo(\n    () =>\n      contract && fragment && callInputs && callInputs.length > 0\n        ? callInputs.map<Call>((inputs) => {\n            return {\n              address: contract.address,\n              callData: contract.interface.encodeFunctionData(fragment, inputs),\n            }\n          })\n        : [],\n    [callInputs, contract, fragment]\n  )\n\n  const results = useCallsData(calls, options)\n\n  const latestBlockNumber = useBlockNumber()\n\n  return useMemo(() => {\n    return results.map((result) => toCallState(result, contract?.interface, fragment, latestBlockNumber))\n  }, [fragment, contract, results, latestBlockNumber])\n}\n\nexport function useMultipleContractSingleData(\n  addresses: (string | undefined)[],\n  contractInterface: Interface,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options?: ListenerOptions\n): CallState[] {\n  console.log('calling',methodName, contractInterface)\n  const fragment = useMemo(() => contractInterface.getFunction(methodName), [contractInterface, methodName])\n  const callData: string | undefined = useMemo(\n    () =>\n      fragment && isValidMethodArgs(callInputs)\n        ? contractInterface.encodeFunctionData(fragment, callInputs)\n        : undefined,\n    [callInputs, contractInterface, fragment]\n  )\n\n  const calls = useMemo(\n    () =>\n      fragment && addresses && addresses.length > 0 && callData\n        ? addresses.map<Call | undefined>((address) => {\n            return address && callData\n              ? {\n                  address,\n                  callData,\n                }\n              : undefined\n          })\n        : [],\n    [addresses, callData, fragment]\n  )\n\n  const results = useCallsData(calls, options)\n  console.log('got results', results)\n\n  const latestBlockNumber = useBlockNumber()\n\n  return useMemo(() => {\n    return results.map((result) => toCallState(result, contractInterface, fragment, latestBlockNumber))\n  }, [fragment, results, contractInterface, latestBlockNumber])\n}\n\nexport function useSingleCallResult(\n  contract: Contract | null | undefined,\n  methodName: string,\n  inputs?: OptionalMethodInputs,\n  options?: ListenerOptions\n): CallState {\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\n\n  const calls = useMemo<Call[]>(() => {\n    return contract && fragment && isValidMethodArgs(inputs)\n      ? [\n          {\n            address: contract.address,\n            callData: contract.interface.encodeFunctionData(fragment, inputs),\n          },\n        ]\n      : []\n  }, [contract, fragment, inputs])\n\n  const result = useCallsData(calls, options)[0]\n  const latestBlockNumber = useBlockNumber()\n\n  return useMemo(() => {\n    return toCallState(result, contract?.interface, fragment, latestBlockNumber)\n  }, [result, contract, fragment, latestBlockNumber])\n}\n","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Loader/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/lists/hooks.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/ConnectWalletButton/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Shared/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Column/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Row/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/connectors/NetworkConnector.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/connectors/Fortmatic.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/connectors/bsc/bscConnector.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/ConnectWalletButton/useAuth.ts",["787"],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Shared/Type.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Shared/Common.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/ConnectWalletButton/Toasts.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/ConnectWalletButton/wallet.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useI18n.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Popups/PopupItem.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useGetPriceData.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/ConnectWalletButton/getRpcUrl.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/Pool/styleds.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useTheme.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/pages/AddLiquidity/ConfirmAddModalBottom.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useWrapCallback.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useApproveCallback.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useToggledVersion.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/translateTextHelpers.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/swap/hooks.ts",["788"],"import { parseUnits } from '@ethersproject/units'\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from 'morph-sdk'\nimport { ParsedQs } from 'qs'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useToggledVersion, { Version } from '../../hooks/useToggledVersion'\nimport useENS from '../../hooks/useENS'\nimport { useV1Trade } from '../../data/V1'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { useTradeExactIn, useTradeExactOut } from '../../hooks/Trades'\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\nimport { isAddress } from '../../utils'\nimport { AppDispatch, AppState } from '../index'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { SwapState } from './reducer'\n\nimport { useUserSlippageTolerance } from '../user/hooks'\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices'\n\nexport function useSwapState(): AppState['swap'] {\n  return useSelector<AppState, AppState['swap']>((state) => state.swap)\n}\n\nexport function useSwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      console.log('currency is', currency, currency === ETHER)\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'FTM' : '',\n        })\n      )\n    },\n    [dispatch]\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  }\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\n  if (!value || !currency) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.info(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\n  '0xEF45d134b73241eDa7703fa787148D9C9F4950b0', // v2 factory\n  '0x16327E3FbDaCA3bcF7E38F5Af2599D2DDc33aE52', // v2 router 01\n]\n\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\n  return (\n    trade.route.path.some((token) => token.address === checksummedAddress) ||\n    trade.route.pairs.some((pair) => pair.liquidityToken.address === checksummedAddress)\n  )\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(): {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmount: CurrencyAmount | undefined\n  v2Trade: Trade | undefined\n  inputError?: string\n  v1Trade: Trade | undefined\n} {\n  const { account } = useActiveWeb3React()\n\n  const toggledVersion = useToggledVersion()\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient,\n  } = useSwapState()\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined,\n  ])\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\n\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  }\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  }\n\n  // get link to trade on v1, if a better rate exists\n  const v1Trade = useV1Trade(isExactIn, currencies[Field.INPUT], currencies[Field.OUTPUT], parsedAmount)\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = 'Connect Wallet'\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? 'Enter an amount'\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? 'Select a token'\n  }\n\n  const formattedTo = isAddress(to)\n  if (!to || !formattedTo) {\n    inputError = inputError ?? 'Enter a recipient'\n  } else if (\n    BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\n    (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\n    (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\n  ) {\n    inputError = inputError ?? 'Invalid recipient'\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\n\n  const slippageAdjustedAmountsV1 =\n    v1Trade && allowedSlippage && computeSlippageAdjustedAmounts(v1Trade, allowedSlippage)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    toggledVersion === Version.v1\n      ? slippageAdjustedAmountsV1\n        ? slippageAdjustedAmountsV1[Field.INPUT]\n        : null\n      : slippageAdjustedAmounts\n      ? slippageAdjustedAmounts[Field.INPUT]\n      : null,\n  ]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = `Insufficient ${amountIn.currency.symbol} balance`\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade ?? undefined,\n    inputError,\n    v1Trade,\n  }\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH'\n    if (valid === false) return 'ETH'\n  }\n  return 'ETH' ?? ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency,\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient,\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\n  | undefined {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const parsedQs = useParsedQueryString()\n  const [result, setResult] = useState<\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\n  >()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(parsedQs)\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: parsed.recipient,\n      })\n    )\n\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId])\n\n  return result\n}\n","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Popups/TransactionPopup.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Popups/ListUpdatePopup.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/data/Reserves.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/data/V1.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/styleds.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/AdvancedSwapDetailsDropdown.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/CurrencySearchModal.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/currencyId.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/wrappedCurrency.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/maxAmountSpend.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/mint/hooks.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/prices.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useParsedQueryString.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/PageHeader/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/transactions/hooks.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/Trades.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useENS.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/listVersionLabel.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/data/Allowances.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/CardNav/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TranslatedText/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useSwapCallback.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useLast.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Card/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/ListSelect.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/CurrencySearch.tsx",["789"],"import { Currency, ETHER, Token } from 'morph-sdk'\nimport React, { KeyboardEvent, RefObject, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { Text, CloseIcon } from 'trinityhelper'\nimport { useSelector } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\nimport { FixedSizeList } from 'react-window'\nimport { ThemeContext } from 'styled-components'\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport { useActiveWeb3React } from '../../hooks'\nimport { AppState } from '../../state'\nimport { useAllTokens, useToken } from '../../hooks/Tokens'\nimport { useSelectedListInfo } from '../../state/lists/hooks'\nimport { LinkStyledButton, TYPE } from '../Shared'\nimport { isAddress } from '../../utils'\nimport Card from '../Card'\nimport Column from '../Column'\nimport ListLogo from '../ListLogo'\nimport QuestionHelper from '../QuestionHelper'\nimport Row, { RowBetween } from '../Row'\nimport CommonBases from './CommonBases'\nimport CurrencyList from './CurrencyList'\nimport { filterTokens } from './filtering'\nimport SortButton from './SortButton'\nimport { useTokenComparator } from './sorting'\nimport { PaddedColumn, SearchInput, Separator } from './styleds'\nimport TranslatedText from '../TranslatedText'\nimport { TranslateString } from '../../utils/translateTextHelpers'\n\nconst { main: Main } = TYPE\n\ninterface CurrencySearchProps {\n  isOpen: boolean\n  onDismiss: () => void\n  selectedCurrency?: Currency | null\n  onCurrencySelect: (currency: Currency) => void\n  otherSelectedCurrency?: Currency | null\n  showCommonBases?: boolean\n  isLPTokenSearch?: boolean\n  dex?: string,\n  onChangeList: () => void\n}\n\nexport function CurrencySearch({\n  selectedCurrency,\n  onCurrencySelect,\n  otherSelectedCurrency,\n  showCommonBases,\n  onDismiss,\n  isOpen,\n  isLPTokenSearch,\n  dex,\n  onChangeList,\n}: CurrencySearchProps) {\n  const { t } = useTranslation()\n  const { chainId } = useActiveWeb3React()\n  const theme = useContext(ThemeContext)\n\n  const fixedList = useRef<FixedSizeList>()\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const [invertSearchOrder, setInvertSearchOrder] = useState<boolean>(false)\n  const allTokens = useAllTokens()\n\n  // if they input an address, use it\n  const isAddressSearch = isAddress(searchQuery)\n  const searchToken = useToken(searchQuery)\n\n  const showETH: boolean = useMemo(() => {\n    const s = searchQuery.toLowerCase().trim()\n    return s === '' || s === 'e' || s === 'et' || s === 'eth'\n  }, [searchQuery])\n\n  const tokenComparator = useTokenComparator(invertSearchOrder)\n\n  const audioPlay = useSelector<AppState, AppState['user']['audioPlay']>((state) => state.user.audioPlay)\n\n  \n  const filteredTokens: Token[] = useMemo(() => {\n    if (isAddressSearch) return searchToken ? [searchToken] : []\n    return filterTokens(Object.values(allTokens), searchQuery, !!isLPTokenSearch, dex)\n  }, [isAddressSearch, searchToken, allTokens, searchQuery, isLPTokenSearch, dex])\n\n  const filteredSortedTokens: Token[] = useMemo(() => {\n    if (searchToken) return [searchToken]\n    const sorted = filteredTokens.sort(tokenComparator)\n    const symbolMatch = searchQuery\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter((s) => s.length > 0)\n    if (symbolMatch.length > 1) return sorted\n\n    return [\n      ...(searchToken ? [searchToken] : []),\n      // sort any exact symbol matches first\n      ...sorted.filter((token) => token.symbol?.toLowerCase() === symbolMatch[0]),\n      ...sorted.filter((token) => token.symbol?.toLowerCase() !== symbolMatch[0]),\n    ]\n  }, [filteredTokens, searchQuery, searchToken, tokenComparator])\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      onCurrencySelect(currency)\n      onDismiss()\n      if (audioPlay) {\n        const audio = document.getElementById('bgMusic') as HTMLAudioElement\n        if (audio) {\n          audio.play()\n        }\n      }\n    },\n    [onDismiss, onCurrencySelect, audioPlay]\n  )\n\n  // clear the input on open\n  useEffect(() => {\n    if (isOpen) setSearchQuery('')\n  }, [isOpen])\n\n  // manage focus on modal show\n  const inputRef = useRef<HTMLInputElement>()\n  const handleInput = useCallback((event) => {\n    const input = event.target.value\n    const checksummedInput = isAddress(input)\n    setSearchQuery(checksummedInput || input)\n    fixedList.current?.scrollTo(0)\n  }, [])\n\n  const handleEnter = useCallback(\n    (e: KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Enter') {\n        const s = searchQuery.toLowerCase().trim()\n        if (s === 'ftm') {\n          handleCurrencySelect(ETHER)\n        } else if (filteredSortedTokens.length > 0) {\n          if (\n            filteredSortedTokens[0].symbol?.toLowerCase() === searchQuery.trim().toLowerCase() ||\n            filteredSortedTokens.length === 1\n          ) {\n            handleCurrencySelect(filteredSortedTokens[0])\n          }\n        }\n      }\n    },\n    [filteredSortedTokens, handleCurrencySelect, searchQuery]\n  )\n\n  const selectedListInfo = useSelectedListInfo()\n\n  return (\n    <Column style={{ width: '100%', flex: '1 1' }}>\n      <PaddedColumn gap=\"14px\">\n        <RowBetween>\n          <Text>\n            {isLPTokenSearch ? \n              <TranslatedText translationId={82}>Select a LP token</TranslatedText>\n              : <TranslatedText translationId={82}>Select a token</TranslatedText>}\n            <QuestionHelper\n              text={TranslateString(\n                130,\n                'Find a token by searching for its name or symbol or by pasting its address below.'\n              )}\n            />\n          </Text>\n          <CloseIcon onClick={onDismiss} />\n        </RowBetween>\n        <SearchInput\n          type=\"text\"\n          id=\"token-search-input\"\n          placeholder={t('tokenSearchPlaceholder')}\n          value={searchQuery}\n          ref={inputRef as RefObject<HTMLInputElement>}\n          onChange={handleInput}\n          onKeyDown={handleEnter}\n        />\n        {showCommonBases && (\n          <CommonBases chainId={chainId} onSelect={handleCurrencySelect} selectedCurrency={selectedCurrency} />\n        )}\n        <RowBetween>\n          <Text fontSize=\"14px\">\n            {isLPTokenSearch ? \n              <TranslatedText translationId={82}>LP token name</TranslatedText>\n              : <TranslatedText translationId={82}>Token name</TranslatedText>}\n          </Text>\n          <SortButton ascending={invertSearchOrder} toggleSortOrder={() => setInvertSearchOrder((iso) => !iso)} />\n        </RowBetween>\n      </PaddedColumn>\n\n      <Separator />\n\n      <div style={{ flex: '1' }}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CurrencyList\n              height={height}\n              showETH={!isLPTokenSearch}\n              currencies={filteredSortedTokens}\n              onCurrencySelect={handleCurrencySelect}\n              otherCurrency={otherSelectedCurrency}\n              selectedCurrency={selectedCurrency}\n              fixedListRef={fixedList}\n              isLPTokenSearch={isLPTokenSearch}\n            />\n          )}\n        </AutoSizer>\n      </div>\n\n      {null && (\n        <>\n          <Separator />\n          <Card>\n            <RowBetween>\n              {selectedListInfo.current ? (\n                <Row>\n                  {selectedListInfo.current && selectedListInfo.current.logoURI ? \n                    <ListLogo\n                      style={{ marginRight: 12 }}\n                      logoURI={selectedListInfo.current.logoURI}\n                      alt={`${selectedListInfo.current.name} list logo`}\n                    /> : null\n                   }\n                  <Main id=\"currency-search-selected-list-name\">{selectedListInfo.current.name}</Main>\n                </Row>\n              ) : null}\n              <LinkStyledButton\n                style={{ fontWeight: 500, color: theme.colors.textSubtle, fontSize: 16 }}\n                onClick={onChangeList}\n                id=\"currency-search-change-list-button\"\n              >\n                {selectedListInfo.current ? 'Change' : 'Select a list'}\n              </LinkStyledButton>\n            </RowBetween>\n          </Card>\n        </>\n      )}\n    </Column>\n  )\n}\n\nexport default CurrencySearch\n","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/AdvancedSwapDetails.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/parseENSAddress.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/uriToHttp.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/contenthashToUri.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/PageHeader/RecentTransactionsModal.tsx",["790"],"import React, { useMemo } from 'react'\nimport { CheckmarkCircleIcon, ErrorIcon, Flex, LinkExternal, Text, Modal, Button } from 'trinityhelper'\nimport { useActiveWeb3React } from 'hooks'\nimport { getEtherscanLink } from 'utils'\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks'\nimport { TransactionDetails } from 'state/transactions/reducer'\nimport Loader from 'components/Loader'\n\ntype RecentTransactionsModalProps = {\n  onDismiss?: () => void\n}\n\n// TODO: Fix UI Kit typings\nconst defaultOnDismiss = () => null\n\nconst newTransactionsFirst = (a: TransactionDetails, b: TransactionDetails) => b.addedTime - a.addedTime\n\nconst getRowStatus = (sortedRecentTransaction: TransactionDetails) => {\n  const { hash, receipt } = sortedRecentTransaction\n\n  if (!hash) {\n    return { icon: <Loader />, color: 'text' }\n  }\n\n  if (hash && receipt?.status === 1) {\n    return { icon: <CheckmarkCircleIcon color=\"success\" />, color: 'success' }\n  }\n\n  return { icon: <ErrorIcon color=\"failure\" />, color: 'failure' }\n}\n\nconst RecentTransactionsModal = ({ onDismiss = defaultOnDismiss }: RecentTransactionsModalProps) => {\n  const { account, chainId } = useActiveWeb3React()\n  const allTransactions = useAllTransactions()\n\n  // Logic taken from Web3Status/index.tsx line 175\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  return (\n    <Modal title=\"Recent Transactions\" onDismiss={onDismiss}>\n      {!account && (\n        <Flex justifyContent=\"center\" flexDirection=\"column\" alignItems=\"center\">\n          <Text mb=\"8px\" bold>\n            Please connect your wallet to view your recent transactions\n          </Text>\n          <Button variant=\"tertiary\" scale=\"sm\" onClick={onDismiss}>\n            Close\n          </Button>\n        </Flex>\n      )}\n      {account && chainId && sortedRecentTransactions.length === 0 && (\n        <Flex justifyContent=\"center\" flexDirection=\"column\" alignItems=\"center\">\n          <Text mb=\"8px\" bold>\n            No recent transactions\n          </Text>\n          <Button variant=\"tertiary\" scale=\"sm\" onClick={onDismiss}>\n            Close\n          </Button>\n        </Flex>\n      )}\n      {account &&\n        chainId &&\n        sortedRecentTransactions.map((sortedRecentTransaction) => {\n          const { hash, summary } = sortedRecentTransaction\n          const { icon, color } = getRowStatus(sortedRecentTransaction)\n\n          return (\n            <>\n              <Flex key={hash} alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n                <LinkExternal href={getEtherscanLink(chainId, hash, 'transaction')} color=\"textSubtle\">\n                  {summary ?? hash}\n                </LinkExternal>\n                {icon}\n              </Flex>\n            </>\n          )\n        })}\n    </Modal>\n  )\n}\n\nexport default RecentTransactionsModal\n","/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/PageHeader/SettingsModal.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/PageHeader/TransactionDeadlineSetting.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/PageHeader/SlippageToleranceSetting.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/QuestionHelper/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Tooltip/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Popover/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useENSName.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useENSAddress.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/isZero.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/state/burn/hooks.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/useDebouncedChangeHandler.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/confirmPriceImpactWithoutFee.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/TradePrice.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/BetterTradeLink.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/ConfirmSwapModal.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/data/TotalSupply.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/CurrencyLogo/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Slider/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/DoubleLogo/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/NavigationTabs/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/PositionCard/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/utils/v1SwapArguments.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TransactionConfirmationModal/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/CurrencyInputPanel/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/ProgressSteps/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SyrupWarningModal/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TokenWarningModal/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/AddressInputPanel/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Pane/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/SwapModalHeader.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/SwapModalFooter.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useHttpLocations.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/pancake/CoinLogo.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useToggle.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/sorting.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/filtering.ts",["791","792"],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/FormattedPriceImpact.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/swap/SwapRoute.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useOnClickOutside.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/styleds.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Modal/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/CurrencyList.tsx",["793"],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/SortButton.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/SearchModal/CommonBases.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TransactionConfirmationModal/ConfirmationModalContent.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TransactionConfirmationModal/ConfirmationPendingContent.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TransactionConfirmationModal/TransactionConfirmationModal.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TransactionConfirmationModal/TransactionSubmittedContent.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TransactionConfirmationModal/TransactionErrorContent.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/hooks/useENSContentHash.ts",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/Logo/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/ListLogo/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/NumericalInput/index.tsx",[],"/Users/coltrane/Documents/Apps/Morph/dex-interface/src/components/TransactionConfirmationModal/helpers.tsx",[],{"ruleId":"794","replacedBy":"795"},{"ruleId":"796","replacedBy":"797"},{"ruleId":"798","replacedBy":"799"},{"ruleId":"800","replacedBy":"801"},{"ruleId":"802","replacedBy":"803"},{"ruleId":"804","severity":1,"message":"805","line":264,"column":7,"nodeType":"806","messageId":"807","endLine":264,"endColumn":18},{"ruleId":"808","severity":1,"message":"809","line":1,"column":10,"nodeType":"810","messageId":"811","endLine":1,"endColumn":14},{"ruleId":"808","severity":1,"message":"812","line":2,"column":17,"nodeType":"810","messageId":"811","endLine":2,"endColumn":28},{"ruleId":"808","severity":1,"message":"813","line":2,"column":30,"nodeType":"810","messageId":"811","endLine":2,"endColumn":40},{"ruleId":"808","severity":1,"message":"814","line":2,"column":53,"nodeType":"810","messageId":"811","endLine":2,"endColumn":60},{"ruleId":"808","severity":1,"message":"815","line":5,"column":10,"nodeType":"810","messageId":"811","endLine":5,"endColumn":22},{"ruleId":"808","severity":1,"message":"816","line":26,"column":10,"nodeType":"810","messageId":"811","endLine":26,"endColumn":37},{"ruleId":"808","severity":1,"message":"817","line":27,"column":10,"nodeType":"810","messageId":"811","endLine":27,"endColumn":23},{"ruleId":"808","severity":1,"message":"818","line":35,"column":72,"nodeType":"810","messageId":"811","endLine":35,"endColumn":93},{"ruleId":"808","severity":1,"message":"819","line":36,"column":10,"nodeType":"810","messageId":"811","endLine":36,"endColumn":30},{"ruleId":"808","severity":1,"message":"820","line":36,"column":32,"nodeType":"810","messageId":"811","endLine":36,"endColumn":47},{"ruleId":"808","severity":1,"message":"821","line":36,"column":49,"nodeType":"810","messageId":"811","endLine":36,"endColumn":73},{"ruleId":"808","severity":1,"message":"822","line":37,"column":10,"nodeType":"810","messageId":"811","endLine":37,"endColumn":14},{"ruleId":"808","severity":1,"message":"823","line":115,"column":10,"nodeType":"810","messageId":"811","endLine":115,"endColumn":29},{"ruleId":"808","severity":1,"message":"824","line":115,"column":31,"nodeType":"810","messageId":"811","endLine":115,"endColumn":51},{"ruleId":"804","severity":1,"message":"805","line":134,"column":3,"nodeType":"806","messageId":"807","endLine":134,"endColumn":14},{"ruleId":"808","severity":1,"message":"825","line":154,"column":17,"nodeType":"810","messageId":"811","endLine":154,"endColumn":31},{"ruleId":"808","severity":1,"message":"826","line":156,"column":30,"nodeType":"810","messageId":"811","endLine":156,"endColumn":36},{"ruleId":"808","severity":1,"message":"827","line":156,"column":50,"nodeType":"810","messageId":"811","endLine":156,"endColumn":64},{"ruleId":"808","severity":1,"message":"828","line":178,"column":9,"nodeType":"810","messageId":"811","endLine":178,"endColumn":22},{"ruleId":"808","severity":1,"message":"829","line":190,"column":9,"nodeType":"810","messageId":"811","endLine":190,"endColumn":30},{"ruleId":"808","severity":1,"message":"830","line":193,"column":12,"nodeType":"810","messageId":"811","endLine":193,"endColumn":23},{"ruleId":"808","severity":1,"message":"831","line":193,"column":25,"nodeType":"810","messageId":"811","endLine":193,"endColumn":39},{"ruleId":"808","severity":1,"message":"832","line":193,"column":41,"nodeType":"810","messageId":"811","endLine":193,"endColumn":57},{"ruleId":"808","severity":1,"message":"833","line":193,"column":59,"nodeType":"810","messageId":"811","endLine":193,"endColumn":72},{"ruleId":"808","severity":1,"message":"834","line":193,"column":74,"nodeType":"810","messageId":"811","endLine":193,"endColumn":80},{"ruleId":"808","severity":1,"message":"835","line":193,"column":84,"nodeType":"810","messageId":"811","endLine":193,"endColumn":96},{"ruleId":"808","severity":1,"message":"836","line":214,"column":9,"nodeType":"810","messageId":"811","endLine":214,"endColumn":14},{"ruleId":"808","severity":1,"message":"837","line":242,"column":27,"nodeType":"810","messageId":"811","endLine":242,"endColumn":28},{"ruleId":"804","severity":1,"message":"805","line":244,"column":7,"nodeType":"806","messageId":"807","endLine":244,"endColumn":18},{"ruleId":"804","severity":1,"message":"805","line":254,"column":7,"nodeType":"806","messageId":"807","endLine":254,"endColumn":18},{"ruleId":"804","severity":1,"message":"805","line":259,"column":5,"nodeType":"806","messageId":"807","endLine":259,"endColumn":16},{"ruleId":"804","severity":1,"message":"805","line":264,"column":5,"nodeType":"806","messageId":"807","endLine":264,"endColumn":16},{"ruleId":"804","severity":1,"message":"805","line":271,"column":5,"nodeType":"806","messageId":"807","endLine":271,"endColumn":16},{"ruleId":"808","severity":1,"message":"837","line":279,"column":27,"nodeType":"810","messageId":"811","endLine":279,"endColumn":28},{"ruleId":"804","severity":1,"message":"805","line":280,"column":5,"nodeType":"806","messageId":"807","endLine":280,"endColumn":16},{"ruleId":"808","severity":1,"message":"837","line":296,"column":27,"nodeType":"810","messageId":"811","endLine":296,"endColumn":28},{"ruleId":"804","severity":1,"message":"805","line":297,"column":5,"nodeType":"806","messageId":"807","endLine":297,"endColumn":16},{"ruleId":"804","severity":1,"message":"805","line":300,"column":5,"nodeType":"806","messageId":"807","endLine":300,"endColumn":16},{"ruleId":"804","severity":1,"message":"805","line":302,"column":5,"nodeType":"806","messageId":"807","endLine":302,"endColumn":16},{"ruleId":"804","severity":1,"message":"805","line":310,"column":7,"nodeType":"806","messageId":"807","endLine":310,"endColumn":18},{"ruleId":"808","severity":1,"message":"838","line":313,"column":11,"nodeType":"810","messageId":"811","endLine":313,"endColumn":17},{"ruleId":"808","severity":1,"message":"839","line":2,"column":19,"nodeType":"810","messageId":"811","endLine":2,"endColumn":28},{"ruleId":"804","severity":1,"message":"805","line":29,"column":4,"nodeType":"806","messageId":"807","endLine":29,"endColumn":15},{"ruleId":"804","severity":1,"message":"805","line":64,"column":1,"nodeType":"806","messageId":"807","endLine":64,"endColumn":12},{"ruleId":"804","severity":1,"message":"805","line":199,"column":3,"nodeType":"806","messageId":"807","endLine":199,"endColumn":14},{"ruleId":"808","severity":1,"message":"840","line":24,"column":11,"nodeType":"810","messageId":"811","endLine":24,"endColumn":21},{"ruleId":"804","severity":1,"message":"805","line":35,"column":7,"nodeType":"806","messageId":"807","endLine":35,"endColumn":18},{"ruleId":"808","severity":1,"message":"841","line":67,"column":9,"nodeType":"810","messageId":"811","endLine":67,"endColumn":25},{"ruleId":"808","severity":1,"message":"842","line":68,"column":25,"nodeType":"810","messageId":"811","endLine":68,"endColumn":30},{"ruleId":"804","severity":1,"message":"805","line":56,"column":5,"nodeType":"806","messageId":"807","endLine":56,"endColumn":16},{"ruleId":"804","severity":1,"message":"805","line":58,"column":7,"nodeType":"806","messageId":"807","endLine":58,"endColumn":18},{"ruleId":"808","severity":1,"message":"843","line":171,"column":3,"nodeType":"810","messageId":"811","endLine":171,"endColumn":18},"lines-around-directive",["844"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/no-unused-vars","'JSBI' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'useContext' is defined but never used.","'useMemo' is defined but never used.","'ThemeContext' is defined but never used.","'BETTER_TRADE_LINK_THRESHOLD' is defined but never used.","'isTradeBetter' is defined but never used.","'useSwapActionHandlers' is defined but never used.","'useExpertModeManager' is defined but never used.","'useUserDeadline' is defined but never used.","'useUserSlippageTolerance' is defined but never used.","'TYPE' is defined but never used.","'loadedInputCurrency' is assigned a value but never used.","'loadedOutputCurrency' is assigned a value but never used.","'swapInputError' is assigned a value but never used.","'onWrap' is assigned a value but never used.","'wrapInputError' is assigned a value but never used.","'parsedAmounts' is assigned a value but never used.","'dependentField' is assigned a value but never used.","'showConfirm' is assigned a value but never used.","'tradeToConfirm' is assigned a value but never used.","'swapErrorMessage' is assigned a value but never used.","'attemptingTxn' is assigned a value but never used.","'txHash' is assigned a value but never used.","'setSwapState' is assigned a value but never used.","'route' is assigned a value but never used.","'e' is defined but never used.","'zapped' is assigned a value but never used.","'useEffect' is defined but never used.","'storagekey' is assigned a value but never used.","'showETH' is assigned a value but never used.","'color' is assigned a value but never used.","'isLPTokenSearch' is defined but never used.","padding-line-between-statements"]